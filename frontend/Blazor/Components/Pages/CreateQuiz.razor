@page "/createQuiz"
@inject NavigationManager NavManager
@inject IJSRuntime JS
@inject HttpClient Http

@using System.ComponentModel.DataAnnotations
@using API.Models
@using System.Net.Http

@if (loginStatus == true)
{
    <h3>Create Quiz</h3>

    <div>
        <label>Quiz Name:</label>
        <input type="text" @bind="Quiz.Name" />
    </div>

    <div>
        <label>Description:</label>
        <textarea @bind="Quiz.Description"></textarea>
    </div>

    <h4>Questions</h4>

    @foreach (var question in Questions)
    {
        var createQuestion = new CreateQuestionDTO();
        var reAnswer = new CreateAnswerDTO();
        <div>
            <h5>Question @((Questions.IndexOf(question) + 1))</h5>
            <label>Content:</label>
            <input type="text" @bind="question.Content" />

            <h6>Answers</h6>
            @foreach (var answer in question.Answers)
            {
                <div>
                    <label>Answer:</label>
                    <input type="text" @bind="answer.Content" />
                    <label>
                        <input type="checkbox" @bind="answer.IsCorrect" />
                        Correct
                    </label>
                    <button @onclick="() => RemoveAnswer(createQuestion, reAnswer)">Remove Answer</button>
                </div>
            }
            <button @onclick="() => AddAnswer(createQuestion)">Add Answer</button>
        </div>
        <button @onclick="() => RemoveQuestion(createQuestion)">Remove Question</button>
    }

    <button @onclick="AddQuestion">Add Question</button>

    <button @onclick="SubmitQuiz">Submit Quiz</button>
}
else
{
    //text = "Log in to create a quiz";
}

<p>@text</p>


@code {
    private string text = "";
    private bool loginStatus;
    private List<Quiz> quizzes;


    protected override async Task OnInitializedAsync()
    {
        var allQuizzes = await Http.GetFromJsonAsync<List<Quiz>>("https://arduino-kahoot.onrender.com/api/Quiz");
        @*quizzes = allQuizzes?.Where(q => q.IsPublic).ToList();*@
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {
            var token = await JS.InvokeAsync<string>("localStorage.getItem", "jwtToken");
            loginStatus = !string.IsNullOrEmpty(token);
            StateHasChanged();
            if (loginStatus == true)
            {
                Console.WriteLine("Token found: " + token);
            }
            else
            {
                Console.WriteLine("Token not found :(");
            }
        }
    }
    private CreateQuizDTO Quiz = new CreateQuizDTO();
    private List<QuestionResponseDTO> Questions = new List<QuestionResponseDTO>();
    private List<CreateQuestionDTO> CreatingQuestions = new List<CreateQuestionDTO>();

    private void AddQuestion()
    {
        CreatingQuestions.Add(new CreateQuestionDTO());
    }

    private void RemoveQuestion(CreateQuestionDTO question)
    {
        CreatingQuestions.Remove(question);
    }

    private void AddAnswer(CreateQuestionDTO question)
    {
        question.Answers.Add(new CreateAnswerDTO());
    }

    private void RemoveAnswer(CreateQuestionDTO question, CreateAnswerDTO answer)
    {
        question.Answers.Remove(answer);
    }

    private async Task SubmitQuiz()
    {
        var quizData = new
        {
            Quiz,
            Questions
        };

        var response = await Http.PostAsJsonAsync("https://your-api-url/api/Quiz", quizData);
        if (response.IsSuccessStatusCode)
        {
            // Redirect or show success message
        }
        else
        {
            // Handle errors
        }
    }
}